<sdf version='1.7'>
  <world name='default'>
    <light name='sun' type='directional'>
      <cast_shadows>1</cast_shadows>
      <pose>0 0 10 0 -0 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
      <spot>
        <inner_angle>0</inner_angle>
        <outer_angle>0</outer_angle>
        <falloff>0</falloff>
      </spot>
    </light>
    <gravity>0.0 0.0 0.0</gravity>
    <!-- <magnetic_field>6e-06 2.3e-05 -4.2e-05</magnetic_field> -->
    <atmosphere type='adiabatic'/>
    <physics type='ode'>
      <max_step_size>0.001</max_step_size>
      <real_time_factor>1</real_time_factor>
      <real_time_update_rate>1000</real_time_update_rate>
    </physics>
    <scene>
      <ambient>0.9 0.9 0.9 1</ambient>
      <background>0.7 0.7 0.7 1</background>
      <shadows>1</shadows>
      <sky>
        <clouds>
          <speed>12</speed>
        </clouds>
      </sky>
      <fog>
        <type>linear</type>
        <start>10</start>
        <end>500</end>
        <density>1</density>
      </fog>
    </scene>

    <model name='abu_dhabi'>
      <pose>-50 -1.5 0 0 0 0.88</pose>
      <static>1</static>
      <link name='terrain'>
        <visual name='visual'>
          <geometry>
            <mesh>
              <uri>model://abu_dhabi/media/terrain.dae</uri>
            </mesh>
          </geometry>
          <transparency>0.4</transparency>
        </visual>
        <collision name='collision'>
          <geometry>
            <mesh>

              <uri>model://abu_dhabi/media/terrain.dae</uri>
            </mesh>
          </geometry>
        </collision>
      </link>
      <link name='buildings'>
        <visual name='visual'>
          <geometry>
            <mesh>
              <uri>model://abu_dhabi/media/buildings.dae</uri>
            </mesh>
          </geometry>
        </visual>
        <!--
        <collision name='collision'>
          <geometry>
            <mesh>
              <uri>model://abu_dhabi/media/buildings.dae</uri>
            </mesh>
          </geometry>
        </collision>
        -->
      </link>
    </model>

<!--     <include>
      <uri>model://virtual_cam</uri>
    </include> -->

    <!-- 
      
      ..........................DRONE & CAMERA.......................... 
    
    -->

    <model name="drone">
      <static>false</static>
      <link name="drone_parent_link"/>

      <model name="camera_1">
        <static>false</static>
        <pose>0 0 0 0 0 0</pose>
        <link name="camera_link">
          <visual name="visual">
            <geometry>
              <box>
                <size>0.3 0.1 0.1</size>
              </box>
            </geometry>
          </visual>
          <sensor name="camera" type="camera">
            <camera>
              <image>
                <width>2000</width>
                <height>2000</height>
              </image>
              <clip>
                <near>0.1</near>
                <far>300</far>
              </clip>
              <always_on>1</always_on>
              <update_rate>2</update_rate>
              <visualize>1</visualize>
              <save enabled="true">
                <path>../frames</path>
              </save>
              <lens>
                <type>stereographic</type>
                <scale_to_hfov>1</scale_to_hfov>
                <cutoff_angle>2</cutoff_angle>
              </lens>
            </camera>
            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
              <alwaysOn>true</alwaysOn>
              <updateRate>0.0</updateRate>
              <cameraName>camera_1</cameraName>
              <imageTopicName>image_raw</imageTopicName>
              <cameraInfoTopicName>camera_1_info</cameraInfoTopicName>
              <frameName>link</frameName>
              <hackBaseline>0.07</hackBaseline>
              <distortionK1>0.0</distortionK1>
              <distortionK2>0.0</distortionK2>
              <distortionK3>0.0</distortionK3>
              <distortionT1>0.0</distortionT1>
              <distortionT2>0.0</distortionT2>
            </plugin>
          </sensor>
          <self_collide>0</self_collide>
          <kinematic>0</kinematic>
        </link>
      </model>  

      <model name="ghost_drone">
        <static>false</static>
        <link name="ghost_drone_link"/>
        <include>
          <uri>model://iris_ghost</uri>
          <pose>0 0 0 0 0 0</pose>
          <name>ghost_drone</name>
        </include>
      </model>
      <model name="drone_orientation">
        <static>false</static>
        <link name="drone_link"/>
        <include>
          <uri>model://iris_green</uri>
          <pose>0 0 0 0 0 0</pose>
          <scale>1.5 1.5 1.5</scale>
          <name>drone_orientation</name>
        </include>
      </model>
      
      <!-- <model name="camera_2">
          <static>false</static>
          <pose>0 0 70 0 1.578 0</pose>
          <link name="camera_link_2">
            <visual name="visual">
              <geometry>
                <box>
                  <size>0.3 0.1 0.1</size>
                </box>
              </geometry>
            </visual>
            <sensor name="camera" type="camera">
              <camera>
                <projection_type>rectilinear</projection_type>
                <horizontal_fov>1.0</horizontal_fov>
                <image>
                  <width>4000</width>
                  <height>4000</height>
                </image>
                <clip>
                  <near>0.1</near>
                  <far>300</far>
                </clip>
                <always_on>1</always_on>
                <update_rate>2</update_rate>
                <visualize>1</visualize>
                <save enabled="true">
                  <path>../frames</path>
                </save>
                <lens>
                  <type>rectilinear</type>
                  <scale_to_hfov>1</scale_to_hfov>
                </lens>
              </camera>
              <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <cameraName>camera_2</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_2_info</cameraInfoTopicName>
                <frameName>link</frameName>
                <hackBaseline>0.07</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
              </plugin>
            </sensor>
            <self_collide>0</self_collide>
            <kinematic>0</kinematic>
          </link>
        </model> -->

    </model>

<!-- 
    <visual>    
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
              <cylinder length="0.005" radius="0.15" />
          </geometry>
          <material name="clear_color">
              <color rgba="0.5 0.5 0.5 0.1"/>
          </material>
      </visual> -->

    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose>-10 10 10 0 0 0</pose>
        <view_controller>orbit</view_controller>
        <projection_type>perspective</projection_type>
        <track_visual>
          <name>drone</name>
          <follow>true</follow>
          <xyz>-10 10 10 </xyz>
          <static>true</static>
          <min_dist>1.0</min_dist>
          <max_dist>100.0</max_dist>
        </track_visual>
      </camera>
    </gui>
  </world>
</sdf>
<!-- vim: set et ft=xml fenc=utf-8 ff=unix sts=0 sw=2 ts=2 : -->
